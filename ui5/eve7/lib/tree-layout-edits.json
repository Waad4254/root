{
    "$schema": "https://vega.github.io/schema/vega/v5.json",
    "description": "Zoomable, collapsable tree by David Bacci: https://www.linkedin.com/in/davbacci/",
    "width": {"signal": "250"},
    "height": {"signal": "250"},
    "autosize": "pad",
    "padding": 5,
    "signals": [
      {"name": "scaleWidth", "value": 14},
      {"name": "nodeWidth", "value": 60},
      {"name": "nodeHeight", "value": 45},
      {"name": "verticalNodeGap", "value": 30},
      {"name": "horizontalNodeGap", "value": 100},
      { "name": "xField", "value": "time",
      "bind": {"name": "x-axis", "input": "select", "options": ["time", "z-coordinates"]},
      "on": [
        {"events": {"type": "change"}, "update": "xField"}
      ]},
      {
        "name": "startingDepth",
        "value": 1,
        "on": [{"events": {"type": "timer", "throttle": 0}, "update": "-1"}]
      },
      {
        "name": "node",
        "value": 0,
        "on": [
          {"events": {"type": "click", "markname": "node"}, "update": "datum.id"},
          {"events": {"type": "timer", "throttle": 10}, "update": "0"}
        ]
      },
      {
        "name": "annotationSig",
        "value": 0,
        "on": [
          {"events": {"type": "click", "markname": "annotationSymbol"}, "update": "datum"}
        ]
      },
      {
        "name": "scalepos",
        "value": 0,
        "on": [
          {"events": {"type": "mousedown"}, "update": "invert('xscale', event.clientX)"}
        ]
      },
      {
        "name": "nodeHighlight",
        "value": "[0]",
        "on": [
          {
            "events": {"type": "mouseover", "markname": "node"},
            "update": "pluck(treeAncestors('treeCalcs', datum.id), 'id')"
          },
          {"events": {"type": "mouseout"}, "update": "[0]"}
        ]
      },
      {
        "name": "isExpanded",
        "value": 0,
        "on": [
          {
            "events": {"type": "click", "markname": "node"},
            "update": "datum.children > 0 && indata('treeClickStorePerm', 'id', datum.childrenIds[0])?true:false"
          }
        ]
      },
      {"name": "xrange", "update": "[0, width]"},
      {"name": "yrange", "update": "[0, height]"},
      {
        "name": "down",
        "value": null,
        "on": [
          {"events": "touchend", "update": "null"},
          {"events": "mousedown, touchstart", "update": "xy()"}
        ]
      },
      {
        "name": "xcur",
        "value": null,
        "on": [
          {"events": "mousedown, touchstart, touchend", "update": "slice(xdom)"}
        ]
      },
      {
        "name": "ycur",
        "value": null,
        "on": [
          {"events": "mousedown, touchstart, touchend", "update": "slice(ydom)"}
        ]
      },
      {
        "name": "delta",
        "value": [0, 0],
        "on": [
          {
            "events": [
              {
                "source": "window",
                "type": "mousemove",
                "consume": true,
                "between": [
                  {"type": "mousedown"},
                  {"source": "window", "type": "mouseup"}
                ]
              },
              {
                "type": "touchmove",
                "consume": true,
                "filter": "event.touches.length === 1"
              }
            ],
            "update": "down ? [down[0]-x(), down[1]-y()] : [0,0]"
          }
        ]
      },
      {
        "name": "anchor",
        "value": [0, 0],
        "on": [
          {
            "events": "wheel",
            "update": "[invert('xscale', x()), invert('yscale', y())]"
          },
          {
            "events": {
              "type": "touchstart",
              "filter": "event.touches.length===2"
            },
            "update": "[(xdom[0] + xdom[1]) / 2, (ydom[0] + ydom[1]) / 2]"
          }
        ]
      },
      {"name": "xext", "update": "[0,scaleWidth]"},
      {"name": "yext", "update": "[0,height]"},
      {
        "name": "zoom",
        "value": 1,
        "on": [
          {
            "events": "wheel!",
            "force": true,
            "update": "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
          },
          {
            "events": {"signal": "dist2"},
            "force": true,
            "update": "dist1 / dist2"
          }
        ]
      },
      {
        "name": "dist1",
        "value": 0,
        "on": [
          {
            "events": {
              "type": "touchstart",
              "filter": "event.touches.length===2"
            },
            "update": "pinchDistance(event)"
          },
          {"events": {"signal": "dist2"}, "update": "dist2"}
        ]
      },
      {
        "name": "dist2",
        "value": 0,
        "on": [
          {
            "events": {
              "type": "touchmove",
              "consume": true,
              "filter": "event.touches.length===2"
            },
            "update": "pinchDistance(event)"
          }
        ]
      },
      { "name": "xbegin", "value": 0, 
      "bind": {"name": "x-axis scale beg","input": "range", "min": -100, "max": 100, "step": 0.000001} },
      { "name": "xend", "value": 14,
      "bind": {"name": "x-axis scale end", "input": "range", "min": -100, "max": 100, "step": 0.000001} },
      {
        "name": "xdom",
        "update": "slice(xext)",
        "on": [
          {
            "events": {"signal": "delta"},
            "update": "[xcur[0] + span(xcur) * delta[0] / scaleWidth, xcur[1] + span(xcur) * delta[0] / scaleWidth]"
          },
          {
            "events": {"signal": "zoom"},
            "update": "[anchor[0] + (xdom[0] - anchor[0]) * zoom, anchor[0] + (xdom[1] - anchor[0]) * zoom]"
          },
          {"events": "dblclick", "update": "[10.8,11]"},
          {"events":  {"signal": "xbegin"}, "update": "[xbegin,xdom[1]]"},
          {"events":  {"signal": "xend"}, "update": "[xdom[0],xend]"}
        ]
      },
      {
        "name": "ydom",
        "update": "slice(yext)",
        "on": [
          {
            "events": {"signal": "delta"},
            "update": "[ycur[0] + span(ycur) * delta[1] / height, ycur[1] + span(ycur) * delta[1] / height]"
          },
          {
            "events": {"signal": "zoom"},
            "update": "[anchor[1] + (ydom[0] - anchor[1]) * zoom, anchor[1] + (ydom[1] - anchor[1]) * zoom]"
          },
          {"events": "dblclick", "update": "[0,height]"}
        ]
      },
      {"name": "scaledNodeWidth", "update": "(nodeWidth/ span(xdom))*scaleWidth"},
      {
        "name": "scaledNodeHeight",
        "update": "abs(nodeHeight/ span(ydom))*height"
      },
      {"name": "scaledFont13", "update": "(13/ span(xdom))*scaleWidth"},
      {"name": "scaledFont12", "update": "(12/ span(xdom))*scaleWidth"},
      {"name": "scaledFont11", "update": "(11/ span(xdom))*scaleWidth"},
      {"name": "scaledKPIHeight", "update": "(5/ span(xdom))*scaleWidth"},
      {"name": "scaledLimit", "update": "(20/ span(xdom))*scaleWidth"}
    ],
    "data": [
      {
        "name": "tree",
        "url": "rootui5sys/eve7/lib/data/output_event_0.json",
        "transform": [
          {"type": "stratify", "key": "id", "parentKey": "parent"},
          {
            "type": "tree",
            "method": {"signal": "'tidy'"},
            "size": [{"signal": "height"}, {"signal": "scaleWidth+100"}],
            "separation": {"signal": "true"},
            "as": ["y", "x", "depth", "children"]
          }
        ]
      },
      {
        "name": "treeCalcs",
        "source": "tree",
        "transform": [
          {"type": "stratify", "key": "id", "parentKey": "parent"},
          {
            "type": "tree",
            "method": {"signal": "'tidy'"},
            "separation": {"signal": "false"},
            "as": ["y", "x", "depth", "children"]
          },
          {"as": "parent", "type": "formula", "expr": "datum.parent"}
        ]
      },
      {
        "name": "treeChildren",
        "source": "treeCalcs",
        "transform": [
          {
            "type": "aggregate",
            "groupby": ["parent"],
            "fields": ["parent"],
            "ops": ["values"],
            "as": ["childrenObjects"]
          },
          {
            "type": "formula",
            "expr": "pluck(datum.childrenObjects,'id')",
            "as": "childrenIds"
          }
        ]
      },
      {
        "name": "treeAncestors",
        "source": "treeCalcs",
        "transform": [
          {
            "type": "formula",
            "as": "treeAncestors",
            "expr": "treeAncestors('treeCalcs', datum.id, 'root')"
          },
          {"type": "flatten", "fields": ["treeAncestors"]},
          {
            "type": "formula",
            "expr": "datum.treeAncestors.parent",
            "as": "allParents"
          }
        ]
      },
      {
        "name": "treeChildrenAll",
        "source": "treeAncestors",
        "transform": [
          {
            "type": "project",
            "fields": [
              "allParents",
              "id",
              "name",
              "parent",
              "x",
              "y",
              "depth",
              "children"
            ]
          },
          {
            "type": "aggregate",
            "fields": ["parent", "parent", "id"],
            "ops": ["values", "count", "min"],
            "groupby": ["allParents"],
            "as": ["allChildrenObjects", "allChildrenCount", "id"]
          },
          {
            "type": "formula",
            "expr": "pluck(datum.allChildrenObjects,'id')",
            "as": "allChildrenIds"
          }
        ]
      },
      {
        "name": "treeClickStoreTemp",
        "source": "treeAncestors",
        "transform": [
          {
            "type": "filter",
            "expr": "startingDepth!=-1?datum.depth <= startingDepth:node !=0 && !isExpanded? datum.parent == node: node !=0 && isExpanded? datum.allParents == node:false"
          },
          {
            "type": "project",
            "fields": ["id", "name", "parent", "x", "y", "depth", "children"]
          },
          {
            "type": "aggregate",
            "fields": ["id"],
            "ops": ["min"],
            "groupby": ["id", "name", "parent", "x", "y", "depth", "children"]
          }
        ]
      },
      {
        "name": "treeClickStorePerm",
        "values": [],
        "on": [
          {"trigger": "startingDepth>=0", "insert": "data('treeClickStoreTemp')"},
          {
            "trigger": "node",
            "insert": "!isExpanded? data('treeClickStoreTemp'):false"
          },
          {
            "trigger": "node",
            "remove": "isExpanded?data('treeClickStoreTemp'):false"
          }
        ]
      },
      {
        "name": "treeLayout",
        "source": "tree",
        "transform": [
          {
            "type": "filter",
            "expr": "indata('treeClickStorePerm', 'id', datum.id)"
          },
          {"type": "stratify", "key": "id", "parentKey": "parent"},
          {
            "type": "tree",
            "method": {"signal": "'tidy'"},
            "nodeSize": [
              {"signal": "nodeHeight+verticalNodeGap"},
              {"signal": "nodeWidth+horizontalNodeGap"}
            ],
            "separation": {"signal": "false"},
            "as": ["y", "x", "depth", "children"]
          },
          {"type": "formula", "expr": "datum.y+(height/2)", "as": "y"},
          {"type": "formula", "expr": "scale('xscale',datum.x)", "as": "xscaled"},
          {"as": "parent", "type": "formula", "expr": "datum.parent"}
        ]
      },
      {
        "name": "fullTreeLayout",
        "source": "treeLayout",
        "transform": [
          {
            "type": "lookup",
            "from": "treeChildren",
            "key": "parent",
            "fields": ["id"],
            "values": ["childrenObjects", "childrenIds"]
          },
          {
            "type": "lookup",
            "from": "treeChildrenAll",
            "key": "allParents",
            "fields": ["id"],
            "values": ["allChildrenIds", "allChildrenObjects"]
          },
          {
            "type": "lookup",
            "from": "treeCalcs",
            "key": "id",
            "fields": ["id"],
            "values": ["children"]
          },
          {
            "type": "formula",
            "expr": "reverse(pluck(treeAncestors('treeCalcs', datum.id), 'id'))[2]",
            "as": "treeParent"
          }
        ]
      },
      {
        "name": "visibleNodes",
        "source": "fullTreeLayout",
        "transform": [
          {
            "type": "filter",
            "expr": "indata('treeClickStorePerm', 'id', datum.id)"
          }
        ]
      },
      {
        "name": "maxWidthAndHeight",
        "source": "visibleNodes",
        "transform": [
          {
            "type": "aggregate",
            "groupby": ["depth"],
            "fields": ["depth", "x", "y"],
            "ops": ["count", "max", "max"],
            "as": ["count", "x", "y"]
          },
          {
            "type": "aggregate",
            "fields": ["depth", "count", "x", "y"],
            "ops": ["max", "max", "max", "max"],
            "as": ["maxDepth", "maxNodes", "maxX", "maxY"]
          }
        ]
      },
      {
        "name": "links",
        "source": "treeLayout",
        "transform": [
          {"type": "treelinks"},
          {
            "type": "linkpath",
            "orient": "vertical",
            "shape": "diagonal",
            "sourceY": {"expr": "scale('yscale', datum.source.y)"},
            "sourceX": {"expr": "scale('xscale', xField == 'time'?datum.source.time_beg:datum.source.z)"},
            "targetY": {"expr": "scale('yscale', datum.target.y)"},
            "targetX": {"expr": "scale('xscale', xField == 'time'?datum.target.time_beg:datum.target.z)"}
          },
          {
            "type": "filter",
            "expr": " indata('treeClickStorePerm', 'id', datum.target.id)"
          }
        ]
      },
      {
        "name": "nodes",
        "source": "tree",
        "transform": [{ "type": "filter", "expr": "datum.children" }]
      },
      {
        "name": "leaves",
        "source": "tree",
        "transform": [{ "type": "filter", "expr": "!datum.children" }]
      },
      {
        "name": "annotation",
        "url": "rootui5sys/eve7/lib/annotations.json"
      },
      {
        "name": "timeInfo",
        "url": "rootui5sys/eve7/lib/data/output_event_0_header.json"
      }
    ],
    "scales": [
      {
        "name": "xscale",
        "type": "linear",
        "round": true,
        "zero": false,
        "domain": {"signal": "xdom"},
        "range": {"signal": "xrange"}
      },
      {
        "name": "yscale",
        "zero": false,
        "domain": {"signal": "ydom"},
        "range": {"signal": "yrange"}
      },
      {
        "name": "kpiscale",
        "zero": false,
        "domain": [0, 100],
        "range": {"signal": "[0,scaledNodeWidth]"}
      },
      {
        "name": "colour",
        "type": "ordinal",
        "range": [
          "#6f6f6f",
          "#4472C4",
          "#3A8E50",
          "#ED7D31",
          "#a63939",
          "#6338a6",
          "#3843a6",
          "#38a695"
        ],
        "domain": {"data": "visibleNodes", "field": "treeParent"}
      },
      {
        "name": "tscale",
        "type": "linear",
        "range": "width",
        "round": true,
        "domain": {
          "data": "tree",
          "field": "time_beg"
                }
      }
    ],

    
  "axes": [
    { "orient": "bottom", "scale": "xscale" , "offset": 5, "title": "x-Axis", "grid": true},
    { "orient": "left", "scale": "yscale" , "offset": 5, "title": "y-Axis", "grid": true}
  ],
    "marks": [
      {
        "type": "path",
        "interactive": false,
        "from": {"data": "links"},
        "encode": {
          "update": {
            "path": {"field": "path"},
            "strokeWidth": {
              "signal": "indexof(nodeHighlight, datum.target.id)> -1? 2.5:0.4"
            },
            "stroke": {
              "scale": "colour",
              "signal": "reverse(pluck(treeAncestors('treeCalcs', datum.target.id), 'id'))[2]"
            }
          }
        }
      },
      {
        "name": "annotationSymbol",
        "type": "symbol",
        "from": {"data": "annotation"},
        "encode": {
          "enter": {
            "fill": {"value": "#939597"},
            "stroke": {"value": "#652c90"},
            "tooltip": {"signal": "{'Annotation': datum.annotation}"}
          },
          "update": {
            "x": {"field": "time", "scale": "xscale"},
            "y": {"field": "y", "scale": "yscale"},
            "size": {"value": 100},
            "shape": {"value": "diamond"},
            "opacity": {"value": 1},
            "strokeWidth": {"value": 4},
            "fillOpacity": {"value": 1.0},
            "strokeOpacity": {"value": 1.0}
          }
        }
      },
      {
        "name": "node",
        "description": "The parent node",
        "type": "symbol",
        "clip": false,
        "from": {"data": "visibleNodes"},
        "encode": {
          "enter": {
            "tooltip": {"signal": "{'id': datum.id, 'subtree size': datum.size, 'children': datum.children}"}
          },
          "update": {
            "x": {"signal": "xField == 'time'?datum.time_beg:datum.z", "scale": "xscale"},
            "y": {"field": "y", "scale": "yscale"},
            "size": {"value": 200},
            "shape": {"value": "circle"},
            "fill": {
              "signal": "merge(hsl(scale('colour', datum.treeParent)), {l:0.94})"
            },
            "stroke": {
              "signal": "merge(hsl(scale('colour', datum.treeParent)), {l:0.79})"
            },
            "cornerRadius": {"value": 2},
            "cursor": {"signal": "datum.children>0?'pointer':''"}
          
          }
        },
        "marks": [
          {
            "name": "highlight",
            "description": "highlight (seems like a Vega bug as this doens't work on the group element)",
            "type": "rect",
            "interactive": false,
            "encode": {
              "update": {
                "x": {"signal": "item.mark.group.x1"},
                "y": {"signal": "0"},
                "fill": {
                  "signal": "indexof(nodeHighlight, parent.id)> -1? merge(hsl(scale('colour', parent.treeParent)), {l:0.82}):0"
                },
                "stroke": {
                  "signal": "indexof(nodeHighlight, parent.id)> -1? merge(hsl(scale('colour', parent.treeParent)), {l:0.79}):0"
                },
                "height": {"signal": "item.mark.group.height"},
                "width": {"signal": "item.mark.group.width"}
              }
            }
          },
          {
            "name": "KPI background",
            "description": "KPI background",
            "type": "rect",
            "interactive": false,
            "clip": true,
            "encode": {
              "update": {
                "x": {"signal": "item.mark.group.x1"},
                "y": {"signal": "item.mark.group.height-scaledKPIHeight"},
                "height": {"signal": "scaledKPIHeight"},
                "width": {"signal": "(item.mark.group.width)"},
                "fill": {"scale": "colour", "signal": "parent.treeParent"},
                "opacity": {"value": 0.2}
              }
            }
          },
          {
            "name": "KPI",
            "description": "KPI",
            "type": "rect",
            "interactive": false,
            "clip": true,
            "encode": {
              "update": {
                "x": {"signal": "item.mark.group.x1"},
                "y": {"signal": "item.mark.group.height-scaledKPIHeight"},
                "height": {"signal": "scaledKPIHeight"},
                "width": {"signal": "scale('kpiscale',parent.kpi)"},
                "fill": {"scale": "colour", "signal": "parent.treeParent"}
              }
            }
          },
          {
            "type": "text",
            "interactive": false,
            "name": "name",
            "encode": {
              "update": {
                "x": {"signal": "(10/ span(xdom))*scaleWidth"},
                "y": {"signal": "(6/ span(xdom))*scaleWidth"},
                "fontWeight": {"value": "600"},
                "baseline": {"value": "top"},
                "fill": {"scale": "colour", "signal": "parent.treeParent"},
                "text": {"signal": "parent.id"},
                "fontSize": {"signal": "scaledFont13"},
                "limit": {"signal": "scaledNodeWidth-scaledLimit"},
                "font": {"value": "Calibri"}
              }
            }
          },
          {
            "type": "text",
            "interactive": false,
            "name": "title",
            "encode": {
              "update": {
                "x": {"signal": "(10/ span(xdom))*scaleWidth"},
                "y": {"signal": "(22/ span(xdom))*scaleWidth"},
                "align": {"value": "left"},
                "baseline": {"value": "top"},
                "fill": {"signal": "'#4D4B44'"},
                "text": {"signal": "parent.size"},
                "fontSize": {"signal": "scaledFont11"},
                "limit": {"signal": "scaledNodeWidth-scaledLimit"},
                "font": {"value": "Calibri"}
              }
            }
          },
          {
            "type": "text",
            "interactive": false,
            "name": "node children",
            "encode": {
              "update": {
                "x": {"signal": "item.mark.group.width - (8/ span(xdom))*scaleWidth"},
                "y": {"signal": "item.mark.group.height/2"},
                "align": {"value": "right"},
                "baseline": {"value": "middle"},
                "fill": {"scale": "colour", "signal": "parent.treeParent"},
                "text": {"signal": "parent.children>0?parent.children:''"},
                "fontSize": {"signal": "scaledFont12"},
                "font": {"value": "Calibri"}
              }
            }
          }
        ]
      }
    ]
  }